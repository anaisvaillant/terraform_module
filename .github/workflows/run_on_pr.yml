name: terraform plan on PR

on:
  pull_request:
    branches:
      - main

jobs:
  folder_changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      any_modified: ${{ steps.changed-files-specific.outputs.any_modified }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.

    - name: Get changed files in the docs folder
      id: changed-files-specific
      uses: tj-actions/changed-files@v39
      with:
        files: deployments/**
        json: true
        quotepath: false

    - name: List all changed files specific
      run: |
        echo "${{ steps.changed-files-specific.outputs.all_modified_files }}"

    - name: Determine modified folders
      id: set-matrix
      run: |
        echo "matrix"="{\"files\":$(echo "${{ steps.changed-files-specific.outputs.all_modified_files }}" | jq -c '[.[] | select(startswith("deployments/")) | split("/")[0:2] | join("/") ] | unique' )}" >> $GITHUB_OUTPUT

  terraform_plan:
    if: ${{ needs.folder_changes.outputs.any_modified == 'true' }}
    needs: folder_changes
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ matrix.files }}
    permissions:
      pull-requests: write
      contents: read

    env:
      TF_VAR_snowflake_username: ${{ secrets.TF_VAR_snowflake_username }}
      TF_VAR_snowflake_password: ${{ secrets.TF_VAR_snowflake_password }}
      TF_VAR_github_token: ${{ secrets.TF_VAR_github_token }}
      TF_VAR_dbt_token: ${{ secrets.TF_VAR_dbt_token }}
    strategy:
      matrix: ${{fromJson(needs.folder_changes.outputs.matrix)}}
      # 1 when using PG as a backend
      max-parallel: 1
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.
    - uses: hashicorp/setup-terraform@v2

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: |
        proj=$(echo ${{ matrix.files }} | cut -d'/' -f2)
        terraform init -backend-config="schema_name=$proj"

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      continue-on-error: true

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ matrix.files }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })